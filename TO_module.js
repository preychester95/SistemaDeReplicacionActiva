var zmq = require('zmq');
const fs = require('fs'); //File management
var sequencedRequests = [];
var TOpoint = zmq.socket('router');
let path_handlers = 'Files/handlers_ids.txt';  
var handlerList = getHandlersIdsFromFile(path_handlers); 
//console.log('El array de id_handler es: '+handlerList);
//var auxfunctions = require('./auxfunctions.js');

// ARGUMENTS
port = process.argv[2];

// Let clients connect to the router:
TOpoint.bindSync('tcp://127.0.0.1:' + port);

TOpoint.on('message', function(idHandler, request) {
	// Get the request generated by the client
	console.log('\n' +'Recibido peticion del manejador ' + idHandler);
	console.log('\n' +'Recibida: '+request);
	var request = JSON.parse(request);

	var position = getPosition(request);
	if (position != -1) {
		console.log('La peticion ya tiene secuencia por lo que hacemos broadcast a todos los manejadores \n');
		broadCastToHandlers(sequencedRequests[position]);
	}
	else {
		console.log('La peticion NO tiene secuencia. La secuenciamos y hacemos broadcast a todos los manejadores \n');
		request.seq = sequencedRequests.length + 1;
		sequencedRequests.push(request);
		//console.log('sequencedRequests: '+JSON.stringify(sequencedRequests[0]));
		broadCastToHandlers(request);
	}
});

function getPosition(request) {
	//console.log('sequencedRequests en getPosition: '+JSON.stringify(sequencedRequests[0]));
	if (sequencedRequests.length <= 0 || sequencedRequests[0] == undefined)
		return -1;
	var i = 0;
	while ((i < sequencedRequests.length) && (sequencedRequests[i].idRequest != request.idRequest)) {
		i = i + 1;
	}
	if(i>=sequencedRequests.length){
		return -1;
	}
	else if (sequencedRequests[i].idRequest == request.idRequest) {
		return i;
	}

}

function broadCastToHandlers(request) {
	handlerList.forEach(function(handler) {
		console.log('Enviando a handler: ' + handler);
		TOpoint.send([handler, JSON.stringify(request)]);
	}) 
}

function getHandlersIdsFromFile(file_path){
	var idHandlerArrayResult = [];
	var resultData = fs.readFileSync(file_path, 'utf8', function(err, data) {	
		if (err){
			console.log(err);
			throw err;
		}
		return data;
	});
    var handlers_data = resultData.split('\n');
    for (var i = 0; i < handlers_data.length - 1; i++) {
        var current_handler = handlers_data[i].split(' ');
        idHandlerArrayResult.push(current_handler[1]);
    }
	return idHandlerArrayResult;
}